/*Código de um robô Lego usando a técnica
codificação fuzzy */
/*Definição dos vetores
de entrada, saída e controle para a lógica Fuzzy */
int entrada [];
float n[];
float z[];
float p[];
float saida_p[];
float saida_z[];
float saida_n[];
int i=0;
int indP = 0;
int indZ = 0;
int indN = 0;
float MaxN = 0;
float MaxZ = 0;
float MaxP = 0;
int centroide = 0;
int somatorio1 = 0;
int somatorio2 = 0;
int somatorio3 = 0;
task main (){
     /*Declaração dos sensores e
     inicialização dos arrays */
     SetSensorColorFull (IN_1);
     SetSensorColorFull (IN_2);
     ArrayInit(entrada, 0, 2);
     ArrayInit(n, 0, 2);
     ArrayInit(z, 0, 2);
     ArrayInit(p, 0, 2);
     ArrayInit(saida_p, 0, 9);
     ArrayInit(saida_z, 0, 9);
     ArrayInit(saida_n, 0, 9);

     while(1){
     /* Atribuição aos indices e
     váriaveis de controle onde será pego
     o máximo valor de cada Vetor correspondente ao:
     N -> Pouco Branco;
     Z -> Médio Branco;
     P -> Muito Branco;
     Intervalo de codificação fuzzy conforme propriedades
     dos sensores de cor do Lego MindStorm que variam entre
     0 a 6. */
              indP = 0;
              indZ = 0;
		            indN = 0;
		            MaxN = 0;
              MaxZ = 0;
              MaxP = 0;
              somatorio1 = 0;
              somatorio2 = 0;
              somatorio3 = 0;

              
              //Aceleração Inicial dos Motores;
		            OnFwd(OUT_A,20);
		            OnFwd(OUT_B,20);
              Wait(1000);
              //Valores dos sensores capturados e salvo no vetor entrada
		            entrada[0] = SENSOR_1;
		            entrada[1] = SENSOR_2;
              /*Fuzzyficação das 9 possibilidades usando um intervalo de:
              0 a 1.50 para N "Pouco Branco"
              1.51 a 4.50 para Z "Médio Branco" tendo como ZE máximo o 3.00
              e 4.51 a 6.00 para P "Muito Branco".*/
		            for(i = 0; i < 2; i ++){
			                 if(entrada[i] <= 1.50){
				                              n[i] = 1.00;
				                              z[i] = 0;
				                              p[i] = 0;
                    }
                    if(entrada[i] > 1.50 && entrada[i] <= 3.00){
                                  //Cálculo usado para representar a subida ou descida nas retas
				                              n[i] = (1.00 - (((entrada[i]*1.00) - 1.50)/(3.00 - 1.50)));
				                              z[i] = (1.00 - (1.00 - (((entrada[i] * 1.00) - 1.50)/( 3.00 - 1.50 ))));
				                              p[i] = 0;
                    }
			                 if(entrada[i] > 3.00 && entrada[i] <= 4.50){
				                              n[i] = 0;
				                              z[i] = (1.00 - (((entrada[i]*1.00) - 3.00)/( 4.50 - 3.00)));
				                              p[i] = (1.00 - (1.00 - (((entrada[i] * 1.00) - 3.00)/( 4.50 - 3.00 ))));
                    }
			                 if(entrada[i] > 4.50){
				                              n[i] = 0;
				                              z[i] = 0;
				                              p[i] = 1.00;
                    }
              }
              //Agregação usando a lógica and e sempre recebendo o menor valor

		            if(n[0] >= n[1]){
			                    saida_p[indP] = n[1];
			                    indP ++;
              }else if (n[0] < n[1]) {
			                 saida_p[indP] = n[0];
			                 indP ++;
              }
              if(n[0] >= z[1]){
			                    saida_p[indP] = z[1];
			                    indP ++;
              }else if (n[0] < z[1]){
			                 saida_p[indP] = n[0];
			                 indP ++;
              }
              if(n[0] >= p[1]){
			                    saida_p[indP] = p[1];
			                    indP ++;
              }else if (n[0] < p[1]){
			                 saida_p[indP] = n[0];
			                 indP ++;
              }
              if(z[0] >= n[1]){
			                   saida_p[indP] = n[1];
			                   indP ++;
              }else if(z[0] < n[1]){
			                 saida_p[indP] = z[0];
			                 indP ++;
              }
              if(z[0] >= z[1]){
			                   saida_z[indZ] = z[1];
			                   indZ ++;
              }else if(z[0] < z[1]){
			                 saida_z[indZ] = z[0];
			                 indZ ++;
              }
		if(z[0] >= p[1]){
                      saida_z[indZ] = p[1];
			                   indZ ++;
              }else if(z[0] < p[1]){
			                 saida_z[indZ] = z[0];
			                 indZ ++;
              }
		            if(p[0] >= n[1]){
			                   saida_p[indP] = n[1];
			                   indP ++;
              }else if(p[0] < n[1]){
			                 saida_p[indP] = p[0];
			                 indP ++;
              }
		            if(p[0] >= z[1]){
			                   saida_z[indZ] = z[1];
			                   indZ ++;
              }else if(p[0] < z[1]){
			                 saida_z[indZ] = p[0];
			                 indZ ++;
              }
		            if(p[0] >= p[1]){
			                   saida_n[indN] = p[1];
			                   indN ++;
              }else if(p[0] < p[1]){
			                 saida_n[indN] = p[0];
			                 indN ++;
              }
              /*Separação do maior valor de cada vetor N,ZE,P
               para o cálculo do centróide.*/
              for(i = 0; i < indP; i++){
                    if(saida_p[i] >= MaxP){
                                  MaxP = saida_p[i];
                    }
              }
              for(i = 0; i < indZ; i++){
                    if(saida_z[i] >= MaxZ){
                                  MaxZ = saida_z[i];
                    }
              }
              for(i = 0; i < indN; i++){
                    if(saida_n[i] >= MaxN){
                                  MaxN = saida_n[i];
                    }
              }
              /*Atribuição de valores para os intervalos de saída
              no qual é usado uma saída de 0° a 60°*/
              for(i = 0; i < 20; i++){
                    somatorio1 += i;
              }
              for(i = 20; i < 40; i++){
                    somatorio2 += i;
              }
              for(i = 40; i <= 60; i++){
                    somatorio3 += i;
              }
              /*Cálculo do centróide uma das técnicas usadas para
              obter uma unica saída*/
              centroide = (somatorio1 * MaxN + somatorio2 * MaxZ + somatorio3 * MaxP)/(MaxN * 20 + MaxZ * 20 + MaxP * 20);

              //Atribuição da saída aos motores do Lego
              if((entrada[0] < 4.50) || (entrada[1] < 4.50)){
                             if(entrada[0] > entrada[1]){
                                           RotateMotor(OUT_A,20,centroide);
                                           RotateMotor(OUT_B,20,-centroide);
                                           OnRev(OUT_AB,20);
                                           Wait(3000);
                             }else if (entrada[0] < entrada[1]){
                                   RotateMotor(OUT_A,20,-centroide);
                                   RotateMotor(OUT_B,20,centroide);
                                   OnRev(OUT_AB,20);
                                   Wait(3000);
                             }
              }
  }
}